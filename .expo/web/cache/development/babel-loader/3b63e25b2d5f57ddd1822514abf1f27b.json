{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/egecetindag/Desktop/Projects/esclot-mobile/routes/Flow/ServicesPage.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport ServiceCard from \"../../components/Service/ServiceCard\";\nimport ServiceCategory from \"../../components/Service/ServiceCategory\";\nimport ServiceLine, { ServiceLineCart } from \"../../components/Service/ServiceLine\";\nimport StickyCard from \"../../components/Service/StickyCard\";\nimport { addCartItem, removeCartItem, setCartType } from \"../../actions/BookingActions\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport Cart from \"../../components/Service/Cart\";\nimport Button from \"../../components/common/Button\";\nimport MobileStickyButton from \"../../components/Service/MobileStickyButton\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { NavigationContainer } from '@react-navigation/native';\n\nfunction Service(props) {\n  var _this = this;\n\n  var dispatch = useDispatch();\n  var params = props.params;\n  var serviceRef = useRef(null);\n  var inputRef = useRef(null);\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      opt = _useState2[0],\n      setSelectOpt = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedCategory = _useState4[0],\n      setSelectedCategory = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectedCategoryId = _useState6[0],\n      setSelectedCategoryId = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      selectedService = _useState8[0],\n      setSelectedService = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      total = _useState10[0],\n      setTotal = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      modalVisible = _useState12[0],\n      setModalVisible = _useState12[1];\n\n  var _useSelector = useSelector(function (state) {\n    return {\n      services: state.service.services,\n      cart: state.booking.cart,\n      inputs: state.service.serviceInputs\n    };\n  }),\n      services = _useSelector.services,\n      cart = _useSelector.cart,\n      inputs = _useSelector.inputs;\n\n  var addToCartCallback = function addToCartCallback(serviceName, cost, code) {\n    setSelectedService({\n      name: serviceName,\n      cost: cost,\n      code: code\n    });\n\n    if (cart && cart.length === 0) {\n      dispatch(setCartType(params.type));\n    }\n\n    if (params.type === \"self\" && inputs[code] && inputs[code].length > 0) {\n      inputRef.current.scrollIntoView();\n    } else {\n      dispatch(addCartItem(selectedCategory.name, serviceName, cost, code));\n    }\n  };\n\n  var addCartSelfService = function addCartSelfService(values) {\n    var inputArr = [];\n    Object.keys(values).map(function (key) {\n      if (key !== \"otherColor\") {\n        inputArr.push(_objectSpread(_objectSpread({}, inputs[selectedService.code].find(function (s) {\n          return s.code === key;\n        })), {}, {\n          options: null,\n          value: values[key] === \"other\" ? values.otherColor : values[key].toString()\n        }));\n      }\n    });\n    dispatch(addCartItem(selectedCategory.name, selectedService.name, selectedService.cost, selectedService.code, inputArr));\n    serviceRef.current.scrollIntoView();\n    setSelectedService({});\n  };\n\n  var deleteItem = function deleteItem(i) {\n    console.log(\"selam\");\n    dispatch(removeCartItem(i));\n  };\n\n  var next = function next() {\n    props.onNext();\n  };\n\n  var formItemLayout = {\n    labelCol: {\n      span: 24\n    },\n    wrapperCol: {\n      span: 16\n    }\n  };\n  useEffect(function () {\n    setSelectedCategory();\n    setSelectedService({});\n    setSelectedCategoryId();\n    setTotal(0);\n  }, [params.type]);\n  useEffect(function () {\n    var total = cart.reduce(function (a, _ref) {\n      var cost = _ref.cost;\n      return a + cost;\n    }, 0);\n    setTotal(total);\n  }, [cart]);\n  return React.createElement(View, {\n    style: {\n      background: \"red\",\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, React.createElement(ScrollView, {\n    style: {\n      background: \"red\",\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.categoriesCol,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, React.createElement(ServiceCard, {\n    title: \"Choose a Category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, React.createElement(View, {\n    style: styles.categoriesRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, services.map(function (category, i) {\n    return React.createElement(ServiceCategory, {\n      key: i,\n      active: i === selectedCategoryId,\n      onClick: function onClick() {\n        setSelectedCategory(category);\n      },\n      icon: category.icon,\n      name: category.name,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    });\n  }))), React.createElement(View, {\n    ref: serviceRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }), selectedCategory && React.createElement(ServiceCard, {\n    title: \"Choose a Service\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    className: \"services-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }, selectedCategory.services.map(function (service, i) {\n    return React.createElement(ServiceLine, {\n      active: service.code === selectedService.code,\n      key: i,\n      addCartItem: function addCartItem() {\n        addToCartCallback(service.name, service.cost, service.code);\n        setSelectOpt(undefined);\n      },\n      name: service.name,\n      cost: service.cost,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 19\n      }\n    });\n  }))), React.createElement(View, {\n    ref: inputRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }))), React.createElement(Modal, {\n    animationType: \"slide\",\n    visible: modalVisible,\n    onRequestClose: function onRequestClose() {\n      Alert.alert(\"Modal has been closed.\");\n      setModalVisible(!modalVisible);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }\n  }, React.createElement(Cart, {\n    cart: cart,\n    setModalVisible: setModalVisible,\n    total: total,\n    next: next,\n    deleteItem: deleteItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }\n  }, React.createElement(MobileStickyButton, {\n    cart: cart,\n    setModalVisible: setModalVisible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Service;\nvar styles = StyleSheet.create({\n  img: {\n    width: 40\n  },\n  categoriesRow: {\n    flex: 1,\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"sources":["/Users/egecetindag/Desktop/Projects/esclot-mobile/routes/Flow/ServicesPage.js"],"names":["React","useEffect","useRef","useState","ServiceCard","ServiceCategory","ServiceLine","ServiceLineCart","StickyCard","addCartItem","removeCartItem","setCartType","useDispatch","useSelector","Cart","Button","MobileStickyButton","createDrawerNavigator","NavigationContainer","Service","props","dispatch","params","serviceRef","inputRef","opt","setSelectOpt","selectedCategory","setSelectedCategory","selectedCategoryId","setSelectedCategoryId","selectedService","setSelectedService","total","setTotal","modalVisible","setModalVisible","state","services","service","cart","booking","inputs","serviceInputs","addToCartCallback","serviceName","cost","code","name","length","type","current","scrollIntoView","addCartSelfService","values","inputArr","Object","keys","map","key","push","find","s","options","value","otherColor","toString","deleteItem","i","console","log","next","onNext","formItemLayout","labelCol","span","wrapperCol","reduce","a","background","flex","styles","categoriesCol","categoriesRow","category","icon","undefined","Alert","alert","StyleSheet","create","img","width","flexDirection","flexWrap","justifyContent"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n// import { Form, Select, Badge, Slider } from 'antd';\nimport ServiceCard from '../../components/Service/ServiceCard';\nimport ServiceCategory from '../../components/Service/ServiceCategory';\nimport ServiceLine, { ServiceLineCart } from '../../components/Service/ServiceLine';\nimport StickyCard from '../../components/Service/StickyCard';\nimport { addCartItem, removeCartItem, setCartType } from '../../actions/BookingActions'\nimport { useDispatch, useSelector } from 'react-redux';\n\n// import { useParams } from 'react-router-dom';\n// import { Input } from 'antd';\n// import Button from '../../components/common/Button';\n// import Text from '../../components/common/Text';\nimport Cart from '../../components/Service/Cart';\nimport Button from '../../components/common/Button';\nimport MobileStickyButton from '../../components/Service/MobileStickyButton';\nimport { View, StyleSheet, ScrollView, Modal,TouchableOpacity } from 'react-native';\n// import Ruler from '../../components/Common/Ruler';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { NavigationContainer } from '@react-navigation/native';\n\nfunction Service(props) {\n  const dispatch = useDispatch();\n  const params = props.params\n  const serviceRef = useRef(null);\n  //   const [form] = Form.useForm();\n  const inputRef = useRef(null);\n  const [opt, setSelectOpt] = useState();\n  const [selectedCategory, setSelectedCategory] = useState();\n  const [selectedCategoryId, setSelectedCategoryId] = useState();\n  const [selectedService, setSelectedService] = useState({});\n  const [total, setTotal] = useState(0);\n  const [modalVisible, setModalVisible] = useState(false);\n  const { services, cart, inputs } = useSelector(state => ({\n    services: state.service.services,\n    cart: state.booking.cart,\n    inputs: state.service.serviceInputs\n  }));\n\n\n  const addToCartCallback = (serviceName, cost, code) => {\n    setSelectedService({ name: serviceName, cost: cost, code: code });\n    if (cart && cart.length === 0) {\n      dispatch(setCartType(params.type))\n    }\n    if (params.type === \"self\" && inputs[code] && inputs[code].length > 0) {\n      inputRef.current.scrollIntoView();\n    }\n    else {\n      dispatch(addCartItem(selectedCategory.name, serviceName, cost, code));\n    }\n\n  }\n  const addCartSelfService = (values) => {\n\n    let inputArr = [];\n    Object.keys(values).map(key => {\n      if (key !== \"otherColor\") {\n        inputArr.push({ ...inputs[selectedService.code].find(s => s.code === key), options: null, value: values[key] === \"other\" ? values.otherColor : values[key].toString() })\n      }\n    });\n\n    dispatch(addCartItem(selectedCategory.name, selectedService.name, selectedService.cost, selectedService.code, inputArr))\n    serviceRef.current.scrollIntoView();\n    setSelectedService({});\n  }\n  const deleteItem = (i) => {\n    console.log(\"selam\")\n    dispatch(removeCartItem(i));\n  }\n  const next = () => {\n    props.onNext();\n  }\n  const formItemLayout = {\n    labelCol: { span: 24 },\n    wrapperCol: { span: 16 },\n  };\n  useEffect(() => {\n    setSelectedCategory();\n    setSelectedService({});\n    setSelectedCategoryId();\n    setTotal(0);\n  }, [params.type]);\n\n  useEffect(() => {\n    let total = cart.reduce((a, { cost }) => a + cost, 0);\n    setTotal(total);\n  }, [cart])\n\n \n  return (\n    <View style={{ background: \"red\", flex:1}}>\n      <ScrollView style={{ background: \"red\", flex: 1 }}>\n        <View style={styles.categoriesCol}>\n          <ServiceCard title=\"Choose a Category\">\n            <View style={styles.categoriesRow}>\n              {services.map((category, i) =>\n                <ServiceCategory key={i} active={i === selectedCategoryId}\n                  onClick={() => {\n                    // serviceRef.current.scrollIntoView();\n                    setSelectedCategory(category);\n                    // setSelectedCategoryId(i);\n                    // setSelectedService({});\n                    // setSelectOpt(undefined) \n                  }}\n                  icon={category.icon}\n                  name={category.name} />\n              )}\n            </View>\n          </ServiceCard>\n          <View ref={serviceRef} />\n          {selectedCategory &&\n            <ServiceCard title=\"Choose a Service\" >\n              <View className=\"services-row\">\n                {selectedCategory.services.map((service, i) =>\n                  <ServiceLine\n                    active={service.code === selectedService.code}\n                    key={i} addCartItem={() => {\n                      addToCartCallback(service.name, service.cost, service.code);\n                      // form.resetFields(); \n                      setSelectOpt(undefined)\n                    }}\n                    name={service.name} cost={service.cost} />)}\n              </View>\n            </ServiceCard>\n          }\n          <View ref={inputRef} />\n          {/* {params.type === \"self\" && inputs[selectedService.code] && inputs[selectedService.code].length > 0 &&\n            <ServiceCard title=\"Inputs\" style={{ paddingRight: \"20px\" }} >\n              <View className=\"inputs-row\">\n                <Form\n                  form={form}\n                  onFinish={addCartSelfService}\n                  {...formItemLayout}\n                  name=\"register\"\n                  scrollToFirstError\n                >\n                  {inputs[selectedService.code].map(inp =>\n                    <>\n                      <Form.Item\n                        shouldUpdate={(prevValues, curValues) => prevValues.additional !== curValues.additional}\n                        label={`${inp.name} (${inp.desc})` }\n                        name={inp.code}\n                        rules={[{ required: true, message: 'Please enter valid input!' }]}\n                      >\n                        {(inp.desc === \"Inches\" || inp.code === \"amount\") ? <Ruler arr={inp.options || []} /> :\n                      \n                          <Select\n                            showSearch\n                            onChange={(op) => { setSelectOpt(op) }}\n                            placeholder=\"Please Select\"\n                            filterOption={(input, option) =>\n                              option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                            }\n                            style={{ width: '100%' }}>\n                            {inp.options && inp.options.map(option =>\n                              <Select.Option value={option.value}>\n                                <View style={{ display: \"flex\", alignItems: \"center\" }}>\n                                  {inp.code === 'color' ? <View style={{ width: \"20px\", height: \"15px\", marginRight: \"10px\", backgroundColor: option.value === \"other\" ? \"white\" : option.value }} /> : \"\"}\n                                  {option.value}</View>\n                              </Select.Option>)}\n                          </Select>\n                        }\n                      </Form.Item>\n\n                      {(inp.code === \"color\" && opt === \"other\") ?\n                        <Form.Item\n                          name=\"otherColor\"\n                          label=\"Other Color Name\"\n                          rules={[{ required: true, message: 'Please enter valid color!' }]}\n                        ><Input />\n                        </Form.Item> :\n\n                        \"\"}\n                    </>\n\n                  )}\n\n                  <Button type=\"primary\" htmlType=\"submit\">\n                    Add to cart\n                    </Button>\n                </Form>\n              </View>\n            </ServiceCard>\n          }*/}\n        </View>\n\n      </ScrollView>\n      <Modal\n      animationType=\"slide\"\n      visible={modalVisible}\n      onRequestClose={() => {\n        Alert.alert(\"Modal has been closed.\");\n        setModalVisible(!modalVisible);\n      }}\n      >\n      \n        <Cart cart={cart} setModalVisible={setModalVisible} total={total} next={next} deleteItem={deleteItem} />\n      </Modal>\n      <View>\n        <MobileStickyButton cart={cart} setModalVisible={setModalVisible}>\n          {/* <Cart cart={cart} total={total} next={next} deleteItem={deleteItem} /> */}\n        </MobileStickyButton></View>\n    </View>\n\n  );\n}\n\nexport default Service;\n\nconst styles = StyleSheet.create({\n  img: {\n    width: 40\n  },\n  categoriesRow: {\n    flex: 1,\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\"\n\n\n  },\n\n\n});"]},"metadata":{},"sourceType":"module"}