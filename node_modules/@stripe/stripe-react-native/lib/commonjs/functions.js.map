{"version":3,"sources":["functions.ts"],"names":["APPLE_PAY_NOT_SUPPORTED_MESSAGE","createPaymentMethod","data","options","NativeStripeSdk","paymentMethod","error","retrievePaymentIntent","clientSecret","paymentIntent","confirmPaymentMethod","paymentIntentClientSecret","isApplePaySupported","isiOS","presentApplePay","params","code","ApplePayError","Canceled","message","updateApplePaySummaryItems","summaryItems","confirmApplePayPayment","handleCardAction","confirmSetupIntent","setupIntent","createTokenForCVCUpdate","cvc","tokenId","handleURLCallback","url","stripeHandled","initPaymentSheet","paymentOption","presentPaymentSheet","response","confirmPaymentSheetPayment"],"mappings":"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","sourcesContent":["import { createError, isiOS } from './helpers';\nimport NativeStripeSdk from './NativeStripeSdk';\nimport {\n  ApplePay,\n  ApplePayError,\n  ApplePayResult,\n  ConfirmPaymentMethodResult,\n  ConfirmPaymentSheetPaymentResult,\n  ConfirmSetupIntent,\n  ConfirmSetupIntentResult,\n  CreatePaymentMethodResult,\n  CreateTokenForCVCUpdateResult,\n  HandleCardActionResult,\n  InitPaymentSheetResult,\n  PaymentMethodCreateParams,\n  PaymentSheet,\n  PresentPaymentSheetResult,\n  RetrievePaymentIntentResult,\n} from './types';\n\nconst APPLE_PAY_NOT_SUPPORTED_MESSAGE =\n  'Apple pay is not supported on this device';\n\nexport const createPaymentMethod = async (\n  data: PaymentMethodCreateParams.Params,\n  options: PaymentMethodCreateParams.Options = {}\n): Promise<CreatePaymentMethodResult> => {\n  try {\n    const paymentMethod = await NativeStripeSdk.createPaymentMethod(\n      data,\n      options\n    );\n    return {\n      paymentMethod,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const retrievePaymentIntent = async (\n  clientSecret: string\n): Promise<RetrievePaymentIntentResult> => {\n  try {\n    const paymentIntent = await NativeStripeSdk.retrievePaymentIntent(\n      clientSecret\n    );\n    return {\n      paymentIntent,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const confirmPaymentMethod = async (\n  paymentIntentClientSecret: string,\n  data: PaymentMethodCreateParams.Params,\n  options: PaymentMethodCreateParams.Options = {}\n): Promise<ConfirmPaymentMethodResult> => {\n  try {\n    const paymentIntent = await NativeStripeSdk.confirmPaymentMethod(\n      paymentIntentClientSecret,\n      data,\n      options\n    );\n    return {\n      paymentIntent,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const isApplePaySupported = async (): Promise<boolean> => {\n  return isiOS && (await NativeStripeSdk.isApplePaySupported());\n};\n\nexport const presentApplePay = async (\n  params: ApplePay.PresentParams\n): Promise<ApplePayResult> => {\n  if (!(await NativeStripeSdk.isApplePaySupported())) {\n    return {\n      error: {\n        code: ApplePayError.Canceled,\n        message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n      },\n    };\n  }\n\n  try {\n    await NativeStripeSdk.presentApplePay(params);\n\n    return {};\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const updateApplePaySummaryItems = async (\n  summaryItems: ApplePay.CartSummaryItem[]\n): Promise<ApplePayResult> => {\n  if (!(await NativeStripeSdk.isApplePaySupported())) {\n    return {\n      error: {\n        code: ApplePayError.Canceled,\n        message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n      },\n    };\n  }\n\n  try {\n    await NativeStripeSdk.updateApplePaySummaryItems(summaryItems);\n\n    return {};\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const confirmApplePayPayment = async (\n  clientSecret: string\n): Promise<ApplePayResult> => {\n  if (!(await NativeStripeSdk.isApplePaySupported())) {\n    return {\n      error: {\n        code: ApplePayError.Canceled,\n        message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n      },\n    };\n  }\n  try {\n    await NativeStripeSdk.confirmApplePayPayment(clientSecret);\n    return {};\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const handleCardAction = async (\n  paymentIntentClientSecret: string\n): Promise<HandleCardActionResult> => {\n  try {\n    const paymentIntent = await NativeStripeSdk.handleCardAction(\n      paymentIntentClientSecret\n    );\n    return {\n      paymentIntent,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const confirmSetupIntent = async (\n  paymentIntentClientSecret: string,\n  data: ConfirmSetupIntent.Params,\n  options: ConfirmSetupIntent.Options = {}\n): Promise<ConfirmSetupIntentResult> => {\n  try {\n    const setupIntent = await NativeStripeSdk.confirmSetupIntent(\n      paymentIntentClientSecret,\n      data,\n      options\n    );\n\n    return {\n      setupIntent,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const createTokenForCVCUpdate = async (\n  cvc: string\n): Promise<CreateTokenForCVCUpdateResult> => {\n  try {\n    const tokenId = await NativeStripeSdk.createTokenForCVCUpdate(cvc);\n\n    return {\n      tokenId,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const handleURLCallback = async (url: string): Promise<boolean> => {\n  const stripeHandled = await NativeStripeSdk.handleURLCallback(url);\n  return stripeHandled;\n};\n\nexport const initPaymentSheet = async (\n  params: PaymentSheet.SetupParams\n): Promise<InitPaymentSheetResult> => {\n  try {\n    const paymentOption = await NativeStripeSdk.initPaymentSheet(params);\n\n    return {\n      paymentOption,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const presentPaymentSheet = async (\n  params: PaymentSheet.PresentParams\n): Promise<PresentPaymentSheetResult> => {\n  try {\n    const response = await NativeStripeSdk.presentPaymentSheet(params);\n\n    return {\n      paymentOption: response.paymentOption,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const confirmPaymentSheetPayment = async (): Promise<ConfirmPaymentSheetPaymentResult> => {\n  try {\n    await NativeStripeSdk.confirmPaymentSheetPayment();\n\n    return {};\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n"]}