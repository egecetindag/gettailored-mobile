{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { createBookingService, createPaymentIntentService, getBookingsService, validateBookingService } from \"../network/services/BookingServices\";\nimport { CREATE_PAYMENT_INTENT_REQUEST, CLEAN_TEMP_BOOKING_ID, CREATE_PAYMENT_INTENT_FAILURE, CREATE_PAYMENT_INTENT_SUCCESS, CREATE_BOOKING_FAILURE, CREATE_BOOKING_REQUEST, CREATE_BOOKING_SUCCESS, GET_BOOKINGS_FAILURE, GET_BOOKINGS_REQUEST, GET_BOOKINGS_SUCCESS, VALIDATE_BOOKING_FAILURE, VALIDATE_BOOKING_REQUEST, VALIDATE_BOOKING_SUCCESS, BOOKING_INFORMATION_RECORDED, ADD_CART_ITEM, REMOVE_CART_ITEM, SET_CART_TYPE, DELETE_BOOKING_INFO, SET_TIME_VALUES } from \"./types\";\nimport { setErrorMsg, setLoading } from \"./GlobalActions\";\nexport var createBooking = function createBooking(params, next) {\n  return function (dispatch) {\n    dispatch(setLoading(true));\n    dispatch({\n      type: CREATE_BOOKING_REQUEST\n    });\n    dispatch(createBookingService(params)).then(function (response) {\n      dispatch(setLoading(false));\n\n      if (response.success) {\n        dispatch({\n          type: CREATE_BOOKING_SUCCESS,\n          bookingID: response.id\n        });\n        next();\n      } else {\n        dispatch(setErrorMsg(response.error));\n        dispatch({\n          type: CREATE_BOOKING_FAILURE,\n          errorMsg: \"An error has occurred\"\n        });\n      }\n    });\n  };\n};\nexport var cleanBookingCreationTempID = function cleanBookingCreationTempID() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAN_TEMP_BOOKING_ID\n    });\n  };\n};\nexport var setErrMsgAndCleanBooking = function setErrMsgAndCleanBooking(msg) {\n  return function (dispatch) {\n    dispatch(cleanBookingCreationTempID());\n    dispatch(setErrorMsg(msg));\n  };\n};\nexport var validateBooking = function validateBooking(params, withFinishButton) {\n  return function _callee(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"validateePending\");\n            dispatch(setLoading(true));\n            dispatch({\n              type: VALIDATE_BOOKING_REQUEST\n            });\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(dispatch(validateBookingService(params)));\n\n          case 5:\n            response = _context.sent;\n            dispatch(setLoading(false));\n\n            if (response.result === 'success') {\n              console.log(\"validatee\", response.price);\n              dispatch({\n                type: VALIDATE_BOOKING_SUCCESS,\n                withFinishButton: withFinishButton,\n                delivery: response.price\n              });\n            } else if (response.result === 'fail') {\n              dispatch({\n                type: VALIDATE_BOOKING_FAILURE,\n                error: response.message\n              });\n            }\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var getBookings = function getBookings() {\n  return function _callee2(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch({\n              type: GET_BOOKINGS_REQUEST\n            });\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(dispatch(getBookingsService()));\n\n          case 3:\n            response = _context2.sent;\n\n            if (response.success) {\n              dispatch({\n                type: GET_BOOKINGS_SUCCESS,\n                payload: response\n              });\n            } else {\n              dispatch({\n                type: GET_BOOKINGS_FAILURE\n              });\n            }\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var recordBookingInformation = function recordBookingInformation(info) {\n  return function (dispatch) {\n    dispatch({\n      type: BOOKING_INFORMATION_RECORDED,\n      info: info\n    });\n  };\n};\nexport var addCartItem = function addCartItem(categoryName, serviceName, cost, code, inputArr) {\n  return function (dispatch) {\n    dispatch({\n      type: ADD_CART_ITEM,\n      data: {\n        category: categoryName,\n        name: serviceName,\n        cost: cost,\n        code: code,\n        inputs: inputArr\n      }\n    });\n  };\n};\nexport var removeCartItem = function removeCartItem(index) {\n  return function (dispatch) {\n    dispatch({\n      type: REMOVE_CART_ITEM,\n      index: index\n    });\n  };\n};\nexport var setCartType = function setCartType(type) {\n  return function (dispatch) {\n    dispatch({\n      type: SET_CART_TYPE,\n      cartType: type\n    });\n  };\n};\nexport var switchService = function switchService(nextService, action) {\n  return function _callee3(dispatch, getState) {\n    var cartType;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            cartType = getState().booking.cartType;\n\n            if (cartType && cartType !== nextService) {} else {\n              action();\n            }\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var deleteBookingInfo = function deleteBookingInfo(action) {\n  return function (dispatch) {\n    dispatch({\n      type: DELETE_BOOKING_INFO\n    });\n    dispatch({\n      type: SET_TIME_VALUES,\n      data: {}\n    });\n\n    if (action) {\n      action();\n    }\n  };\n};\nexport var createPaymentIntent = function createPaymentIntent(id) {\n  return function _callee4(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            dispatch(setLoading(true));\n            dispatch({\n              type: CREATE_PAYMENT_INTENT_REQUEST\n            });\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(dispatch(createPaymentIntentService(id)));\n\n          case 4:\n            response = _context4.sent;\n            dispatch(setLoading(false));\n\n            if (response.success) {\n              dispatch({\n                type: CREATE_PAYMENT_INTENT_SUCCESS,\n                travelClientSecret: response.travel_client_secret,\n                serviceClientSecret: response.service_client_secret\n              });\n            } else {\n              dispatch(setErrorMsg(\"An error has occurred, refresh the page\"));\n              dispatch({\n                type: CREATE_PAYMENT_INTENT_FAILURE\n              });\n            }\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/Users/egecetindag/Desktop/Projects/esclot-mobile/actions/BookingActions.js"],"names":["createBookingService","createPaymentIntentService","getBookingsService","validateBookingService","CREATE_PAYMENT_INTENT_REQUEST","CLEAN_TEMP_BOOKING_ID","CREATE_PAYMENT_INTENT_FAILURE","CREATE_PAYMENT_INTENT_SUCCESS","CREATE_BOOKING_FAILURE","CREATE_BOOKING_REQUEST","CREATE_BOOKING_SUCCESS","GET_BOOKINGS_FAILURE","GET_BOOKINGS_REQUEST","GET_BOOKINGS_SUCCESS","VALIDATE_BOOKING_FAILURE","VALIDATE_BOOKING_REQUEST","VALIDATE_BOOKING_SUCCESS","BOOKING_INFORMATION_RECORDED","ADD_CART_ITEM","REMOVE_CART_ITEM","SET_CART_TYPE","DELETE_BOOKING_INFO","SET_TIME_VALUES","setErrorMsg","setLoading","createBooking","params","next","dispatch","type","then","response","success","bookingID","id","error","errorMsg","cleanBookingCreationTempID","setErrMsgAndCleanBooking","msg","validateBooking","withFinishButton","console","log","result","price","delivery","message","getBookings","payload","recordBookingInformation","info","addCartItem","categoryName","serviceName","cost","code","inputArr","data","category","name","inputs","removeCartItem","index","setCartType","cartType","switchService","nextService","action","getState","booking","deleteBookingInfo","createPaymentIntent","travelClientSecret","travel_client_secret","serviceClientSecret","service_client_secret"],"mappings":"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","sourcesContent":["// import {Modal} from 'antd';\n// import { ExclamationCircleOutlined } from '@ant-design/icons';\nimport {\n  createBookingService,\n  createPaymentIntentService,\n  getBookingsService,\n  validateBookingService,\n} from '../network/services/BookingServices';\nimport {\n  CREATE_PAYMENT_INTENT_REQUEST,\n  CLEAN_TEMP_BOOKING_ID,\n  CREATE_PAYMENT_INTENT_FAILURE,\n  CREATE_PAYMENT_INTENT_SUCCESS,\n  CREATE_BOOKING_FAILURE,\n  CREATE_BOOKING_REQUEST,\n  CREATE_BOOKING_SUCCESS,\n  GET_BOOKINGS_FAILURE,\n  GET_BOOKINGS_REQUEST,\n  GET_BOOKINGS_SUCCESS,\n  VALIDATE_BOOKING_FAILURE,\n  VALIDATE_BOOKING_REQUEST,\n  VALIDATE_BOOKING_SUCCESS,\n  BOOKING_INFORMATION_RECORDED,\n  ADD_CART_ITEM,\n  REMOVE_CART_ITEM,\n  SET_CART_TYPE,\n  DELETE_BOOKING_INFO,\n  SET_TIME_VALUES,\n} from './types';\nimport { setErrorMsg, setLoading } from './GlobalActions';\n\nexport const createBooking = (params, next) => {\n  return (dispatch) => {\n    dispatch(setLoading(true));\n    dispatch({\n      type: CREATE_BOOKING_REQUEST,\n    })\n    dispatch(createBookingService(params))\n      .then((response) => {\n        dispatch(setLoading(false));\n        if (response.success) {\n\n          dispatch({\n            type: CREATE_BOOKING_SUCCESS,\n            bookingID: response.id\n          })\n\n          next()\n        } else {\n          dispatch(setErrorMsg(response.error));\n          dispatch({\n            type: CREATE_BOOKING_FAILURE,\n            errorMsg: \"An error has occurred\"\n          })\n        }\n      })\n  }\n}\n\nexport const cleanBookingCreationTempID = () => {\n  return (dispatch) => {\n    dispatch({\n      type: CLEAN_TEMP_BOOKING_ID\n    })\n  }\n}\n\nexport const setErrMsgAndCleanBooking = (msg) => {\n  return (dispatch) => {\n    dispatch(cleanBookingCreationTempID())\n    dispatch(setErrorMsg(msg))\n  }\n}\n\nexport const validateBooking = (params, withFinishButton) => {\n  return async (dispatch) => {\n    console.log(\"validateePending\")\n    dispatch(setLoading(true))\n    dispatch({\n      type: VALIDATE_BOOKING_REQUEST,\n    })\n    let response = await dispatch(validateBookingService(params));\n\n    dispatch(setLoading(false))\n    if (response.result === 'success') {\n      console.log(\"validatee\", response.price)\n      dispatch({\n        type: VALIDATE_BOOKING_SUCCESS,\n        withFinishButton: withFinishButton,\n        delivery: response.price\n      })\n    }\n    else if (response.result === 'fail') {\n      dispatch({\n        type: VALIDATE_BOOKING_FAILURE,\n        error: response.message\n      })\n    }\n  }\n}\n\nexport const getBookings = () => {\n  return async (dispatch) => {\n    dispatch({\n      type: GET_BOOKINGS_REQUEST,\n    })\n    let response = await dispatch(getBookingsService());\n\n    if (response.success) {\n      dispatch({\n        type: GET_BOOKINGS_SUCCESS,\n        payload: response\n      })\n    }\n    else {\n      dispatch({\n        type: GET_BOOKINGS_FAILURE,\n      })\n      // error(response.error);\n    }\n  }\n}\n\n\n\n\nexport const recordBookingInformation = (info) => {\n  return (dispatch) => {\n    dispatch({\n      type: BOOKING_INFORMATION_RECORDED,\n      info: info\n    })\n  }\n}\n\nexport const addCartItem = (categoryName, serviceName, cost, code, inputArr) => {\n  return (dispatch) => {\n    dispatch({\n      type: ADD_CART_ITEM,\n      data: {\n        category: categoryName,\n        name: serviceName,\n        cost,\n        code,\n        inputs: inputArr\n      }\n    })\n  }\n}\n\nexport const removeCartItem = (index) => {\n  return (dispatch) => {\n    dispatch({\n      type: REMOVE_CART_ITEM,\n      index: index\n    })\n  }\n}\n\nexport const setCartType = (type) => {\n  return (dispatch) => {\n    dispatch({\n      type: SET_CART_TYPE,\n      cartType: type\n    })\n  }\n}\nexport const switchService = (nextService, action)=>{\n  return async (dispatch, getState) => {\n  \n    const cartType = getState().booking.cartType;\n    if(cartType && cartType !== nextService){\n      // Modal.confirm({\n      //   title: 'Confirm switching to '+ nextService +' service',\n      //   icon: <ExclamationCircleOutlined />,\n      //   content: 'Your cart will be emptied if you confirm.',\n      //   okText: 'OK',\n      //   cancelText: 'Cancel',\n      //   onOk: ()=>{ dispatch(deleteBookingInfo(action))},\n      //   okCancel: ()=>{}\n      // });\n    \n    }\n    else{\n      action();\n    }\n  }\n}\nexport const deleteBookingInfo = (action) => {\n  return (dispatch) => {\n    dispatch({\n      type: DELETE_BOOKING_INFO,\n    })\n    dispatch({\n      type: SET_TIME_VALUES,\n      data:{}\n    })\n    if(action){\n      action();\n    }\n  }\n}\n\nexport const createPaymentIntent = (id) => {\n  return async (dispatch) => {\n    dispatch(setLoading(true));\n    dispatch({\n      type: CREATE_PAYMENT_INTENT_REQUEST\n    })\n    let response = await dispatch(createPaymentIntentService(id));\n\n    dispatch(setLoading(false));\n    if (response.success) {\n      dispatch({\n        type: CREATE_PAYMENT_INTENT_SUCCESS,\n        travelClientSecret: response.travel_client_secret,\n        serviceClientSecret: response.service_client_secret\n      })\n    } else {\n      dispatch(setErrorMsg(\"An error has occurred, refresh the page\"))\n      dispatch({\n        type: CREATE_PAYMENT_INTENT_FAILURE\n      })\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}