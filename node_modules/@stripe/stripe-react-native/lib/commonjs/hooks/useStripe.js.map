{"version":3,"sources":["useStripe.tsx"],"names":["useStripe","isApplePaySupported","setApplePaySupported","checkApplePaySupport","isiOS","NativeStripeSdk","isSupported","_createPaymentMethod","data","options","_retrievePaymentIntent","clientSecret","_confirmPaymentMethod","paymentIntentClientSecret","_presentApplePay","params","_updateApplePaySummaryItems","summaryItems","_confirmApplePayPayment","_handleCardAction","_confirmSetupIntent","_createTokenForCVCUpdate","cvc","_initPaymentSheet","_presentPaymentSheet","_confirmPaymentSheetPayment","_handleURLCallback","url","retrievePaymentIntent","confirmPayment","createPaymentMethod","handleCardAction","presentApplePay","confirmApplePayPayment","confirmSetupIntent","createTokenForCVCUpdate","updateApplePaySummaryItems","handleURLCallback","confirmPaymentSheetPayment","presentPaymentSheet","initPaymentSheet"],"mappings":"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","sourcesContent":["import type {\n  PaymentMethodCreateParams,\n  ApplePay,\n  PaymentSheet,\n  CreatePaymentMethodResult,\n  RetrievePaymentIntentResult,\n  ConfirmPaymentMethodResult,\n  HandleCardActionResult,\n  ConfirmSetupIntentResult,\n  CreateTokenForCVCUpdateResult,\n  ApplePayResult,\n  InitPaymentSheetResult,\n  PresentPaymentSheetResult,\n  ConfirmPaymentSheetPaymentResult,\n  ConfirmSetupIntent,\n} from '../types';\nimport { useCallback, useEffect, useState } from 'react';\nimport { isiOS } from '../helpers';\nimport NativeStripeSdk from '../NativeStripeSdk';\nimport {\n  confirmPaymentMethod,\n  createPaymentMethod,\n  retrievePaymentIntent,\n  confirmApplePayPayment,\n  confirmSetupIntent,\n  createTokenForCVCUpdate,\n  handleCardAction,\n  handleURLCallback,\n  presentApplePay,\n  updateApplePaySummaryItems,\n  initPaymentSheet,\n  presentPaymentSheet,\n  confirmPaymentSheetPayment,\n} from '../functions';\n\n/**\n * useStripe hook\n */\nexport function useStripe() {\n  const [isApplePaySupported, setApplePaySupported] = useState(false);\n\n  useEffect(() => {\n    async function checkApplePaySupport() {\n      const isSupported =\n        isiOS && (await NativeStripeSdk.isApplePaySupported());\n      setApplePaySupported(isSupported);\n    }\n\n    checkApplePaySupport();\n  }, []);\n\n  const _createPaymentMethod = useCallback(\n    async (\n      data: PaymentMethodCreateParams.Params,\n      options: PaymentMethodCreateParams.Options = {}\n    ): Promise<CreatePaymentMethodResult> => {\n      return createPaymentMethod(data, options);\n    },\n    []\n  );\n\n  const _retrievePaymentIntent = useCallback(\n    async (clientSecret: string): Promise<RetrievePaymentIntentResult> => {\n      return retrievePaymentIntent(clientSecret);\n    },\n    []\n  );\n\n  const _confirmPaymentMethod = useCallback(\n    async (\n      paymentIntentClientSecret: string,\n      data: PaymentMethodCreateParams.Params,\n      options: PaymentMethodCreateParams.Options = {}\n    ): Promise<ConfirmPaymentMethodResult> => {\n      return confirmPaymentMethod(paymentIntentClientSecret, data, options);\n    },\n    []\n  );\n\n  const _presentApplePay = useCallback(\n    async (params: ApplePay.PresentParams): Promise<ApplePayResult> => {\n      return presentApplePay(params);\n    },\n    []\n  );\n\n  const _updateApplePaySummaryItems = useCallback(\n    async (\n      summaryItems: ApplePay.CartSummaryItem[]\n    ): Promise<ApplePayResult> => {\n      return updateApplePaySummaryItems(summaryItems);\n    },\n    []\n  );\n\n  const _confirmApplePayPayment = useCallback(\n    async (clientSecret: string): Promise<ApplePayResult> => {\n      return confirmApplePayPayment(clientSecret);\n    },\n    []\n  );\n\n  const _handleCardAction = useCallback(\n    async (\n      paymentIntentClientSecret: string\n    ): Promise<HandleCardActionResult> => {\n      return handleCardAction(paymentIntentClientSecret);\n    },\n    []\n  );\n\n  const _confirmSetupIntent = useCallback(\n    async (\n      paymentIntentClientSecret: string,\n      data: ConfirmSetupIntent.Params,\n      options: ConfirmSetupIntent.Options = {}\n    ): Promise<ConfirmSetupIntentResult> => {\n      return confirmSetupIntent(paymentIntentClientSecret, data, options);\n    },\n    []\n  );\n\n  const _createTokenForCVCUpdate = useCallback(\n    async (cvc: string): Promise<CreateTokenForCVCUpdateResult> => {\n      return createTokenForCVCUpdate(cvc);\n    },\n    []\n  );\n\n  const _initPaymentSheet = useCallback(\n    async (\n      params: PaymentSheet.SetupParams\n    ): Promise<InitPaymentSheetResult> => {\n      return initPaymentSheet(params);\n    },\n    []\n  );\n\n  const _presentPaymentSheet = useCallback(\n    async (\n      params: PaymentSheet.PresentParams\n    ): Promise<PresentPaymentSheetResult> => {\n      return presentPaymentSheet(params);\n    },\n    []\n  );\n\n  const _confirmPaymentSheetPayment = useCallback(async (): Promise<ConfirmPaymentSheetPaymentResult> => {\n    return confirmPaymentSheetPayment();\n  }, []);\n\n  const _handleURLCallback = useCallback(\n    async (url: string): Promise<boolean> => {\n      return handleURLCallback(url);\n    },\n    []\n  );\n\n  return {\n    retrievePaymentIntent: _retrievePaymentIntent,\n    confirmPayment: _confirmPaymentMethod,\n    createPaymentMethod: _createPaymentMethod,\n    handleCardAction: _handleCardAction,\n    isApplePaySupported: isApplePaySupported,\n    presentApplePay: _presentApplePay,\n    confirmApplePayPayment: _confirmApplePayPayment,\n    confirmSetupIntent: _confirmSetupIntent,\n    createTokenForCVCUpdate: _createTokenForCVCUpdate,\n    updateApplePaySummaryItems: _updateApplePaySummaryItems,\n    handleURLCallback: _handleURLCallback,\n    confirmPaymentSheetPayment: _confirmPaymentSheetPayment,\n    presentPaymentSheet: _presentPaymentSheet,\n    initPaymentSheet: _initPaymentSheet,\n  };\n}\n"]}