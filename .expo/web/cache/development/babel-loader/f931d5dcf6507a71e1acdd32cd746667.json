{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { getServicesService, getServiceInputsService, getTimeSlotsService } from \"../network/services/ServiceServices\";\nimport { GET_SERVICES_FAILURE, GET_SERVICES_REQUEST, GET_SERVICES_SUCCESS, GET_SERVICE_INPUTS_REQUEST, GET_SERVICE_INPUTS_SUCCESS, GET_SERVICE_INPUTS_FAILURE } from \"./types\";\nexport var getServices = function getServices(id) {\n  return function _callee(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch({\n              type: GET_SERVICES_REQUEST\n            });\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(dispatch(getServicesService()));\n\n          case 3:\n            response = _context.sent;\n\n            if (response.success) {\n              dispatch({\n                type: GET_SERVICES_SUCCESS,\n                payload: response\n              });\n            } else {\n              dispatch({\n                type: GET_SERVICES_FAILURE\n              });\n            }\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var getServiceInputs = function getServiceInputs() {\n  return function _callee2(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch({\n              type: GET_SERVICE_INPUTS_REQUEST\n            });\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(dispatch(getServiceInputsService()));\n\n          case 3:\n            response = _context2.sent;\n\n            if (response.success) {\n              dispatch({\n                type: GET_SERVICE_INPUTS_SUCCESS,\n                inputs: response\n              });\n            } else {\n              dispatch({\n                type: GET_SERVICE_INPUTS_FAILURE\n              });\n            }\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/Users/egecetindag/Desktop/Projects/esclot-mobile/actions/ServiceActions.js"],"names":["getServicesService","getServiceInputsService","getTimeSlotsService","GET_SERVICES_FAILURE","GET_SERVICES_REQUEST","GET_SERVICES_SUCCESS","GET_SERVICE_INPUTS_REQUEST","GET_SERVICE_INPUTS_SUCCESS","GET_SERVICE_INPUTS_FAILURE","getServices","id","dispatch","type","response","success","payload","getServiceInputs","inputs"],"mappings":";AAAA,SACEA,kBADF,EAEEC,uBAFF,EAGEC,mBAHF;AAKA,SACEC,oBADF,EAEEC,oBAFF,EAGEC,oBAHF,EAIEC,0BAJF,EAKEC,0BALF,EAMEC,0BANF;AAUA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,EAAD,EAAQ;AACjC,SAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACLA,YAAAA,QAAQ,CAAC;AACPC,cAAAA,IAAI,EAAER;AADC,aAAD,CAAR;AADK;AAAA,6CAIgBO,QAAQ,CAACX,kBAAkB,EAAnB,CAJxB;;AAAA;AAIDa,YAAAA,QAJC;;AAKL,gBAAIA,QAAQ,CAACC,OAAb,EAAsB;AACpBH,cAAAA,QAAQ,CAAC;AACPC,gBAAAA,IAAI,EAAEP,oBADC;AAEPU,gBAAAA,OAAO,EAAEF;AAFF,eAAD,CAAR;AAID,aALD,MAMK;AACHF,cAAAA,QAAQ,CAAC;AACPC,gBAAAA,IAAI,EAAET;AADC,eAAD,CAAR;AAID;;AAhBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAkBD,CAnBM;AAqBP,OAAO,IAAMa,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AACpC,SAAO,kBAAOL,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACLA,YAAAA,QAAQ,CAAC;AACPC,cAAAA,IAAI,EAAEN;AADC,aAAD,CAAR;AADK;AAAA,6CAIgBK,QAAQ,CAACV,uBAAuB,EAAxB,CAJxB;;AAAA;AAIDY,YAAAA,QAJC;;AAML,gBAAIA,QAAQ,CAACC,OAAb,EAAsB;AACpBH,cAAAA,QAAQ,CAAC;AACPC,gBAAAA,IAAI,EAAEL,0BADC;AAEPU,gBAAAA,MAAM,EAAEJ;AAFD,eAAD,CAAR;AAID,aALD,MAMK;AACHF,cAAAA,QAAQ,CAAC;AACPC,gBAAAA,IAAI,EAAEJ;AADC,eAAD,CAAR;AAID;;AAjBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAmBD,CApBM","sourcesContent":["import {\n  getServicesService,\n  getServiceInputsService,\n  getTimeSlotsService\n} from '../network/services/ServiceServices';\nimport {\n  GET_SERVICES_FAILURE,\n  GET_SERVICES_REQUEST,\n  GET_SERVICES_SUCCESS,\n  GET_SERVICE_INPUTS_REQUEST,\n  GET_SERVICE_INPUTS_SUCCESS,\n  GET_SERVICE_INPUTS_FAILURE,\n} from './types';\n\n\nexport const getServices = (id) => {\n  return async (dispatch) => {\n    dispatch({\n      type: GET_SERVICES_REQUEST,\n    })\n    let response = await dispatch(getServicesService());\n    if (response.success) {\n      dispatch({\n        type: GET_SERVICES_SUCCESS,\n        payload: response\n      })\n    }\n    else {\n      dispatch({\n        type: GET_SERVICES_FAILURE,\n      })\n      // error(response.error);\n    }\n  }\n}\n\nexport const getServiceInputs = () => {\n  return async (dispatch) => {\n    dispatch({\n      type: GET_SERVICE_INPUTS_REQUEST,\n    })\n    let response = await dispatch(getServiceInputsService());\n\n    if (response.success) {\n      dispatch({\n        type: GET_SERVICE_INPUTS_SUCCESS,\n        inputs: response\n      })\n    }\n    else {\n      dispatch({\n        type: GET_SERVICE_INPUTS_FAILURE,\n      })\n      // error(response.error);\n    }\n  }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}